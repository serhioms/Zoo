package ca.interview.hackerrank;

public class Test2 {
/*

	2. System Design
	Design a distributed log aggregator system which can aggregate logs from multiple systems at scale.

	Should be able to scale horizontally ( Number of hosts publishing Logs can be in 1M range)
	Data Aggregation Latency needs to be low sub 5 min
	Logs could be Application Service Logs, Host Parameters , Online User Clickstream
	Can be Searchable (with flexible metrics intervals (minute, hr , day etc)  
	Provide a System Arch diagram, the components break down, and possibly a Schema and API model

	You can not use a pre-existing solution and needs to be implemented from the ground up. 
	
	
	Aggregator is implemented view microservices. Then it can be deployed to any container which supports horizontal scalability like Kubernetes. Publishers must post message which contains publisher name and log itself. For better perfomance it coud be list of messages for specified publisher. Then all data can be stored in relational DB in one table schema - message table with publisher name column, message timestamp column and text column. Message table can be partitioned by publisher name and timestamp for better perfomance on search/insert. Search provided by get microservice with various parameters like publisher name, date-time range and log keywords. If database is not appropriate storage then could be configured simple file storage generated by any 3d party loggers like log4j with various logger policies including storing each publisher on its own file, log rollout, etc. For doing search in log files we can use 3rd party API like Splunk which provide programmatic interface and microservices interface also.

	Use reversable gateways
*/	
}
